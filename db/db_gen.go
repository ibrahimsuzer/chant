// Code generated by Prisma Client Go. DO NOT EDIT.
//nolint
// +build !codeanalysis

package db

import (
	"context"
	"testing"

	"github.com/prisma/prisma-client-go/engine"
	"github.com/prisma/prisma-client-go/engine/mock"
	"github.com/prisma/prisma-client-go/runtime/builder"
	"github.com/prisma/prisma-client-go/runtime/lifecycle"
	"github.com/prisma/prisma-client-go/runtime/raw"
	"github.com/prisma/prisma-client-go/runtime/transaction"
	"github.com/prisma/prisma-client-go/runtime/types"

	// no-op import for go modules
	_ "github.com/iancoleman/strcase"
	_ "github.com/joho/godotenv"
	_ "github.com/shopspring/decimal"
	_ "github.com/takuoki/gocase"
)

// re-declare variables which are needed in Prisma Client Go but also should be exported
// in the generated client

type BatchResult = types.BatchResult

type DateTime = types.DateTime
type JSON = types.JSON
type Bytes = types.Bytes
type BigInt = types.BigInt
type Decimal = types.Decimal

type Direction = types.Direction

const (
	ASC  Direction = types.ASC
	DESC Direction = types.DESC
)

const RFC3339Milli = types.RFC3339Milli

// --- template actions.gotpl ---
var countOutput = []builder.Output{
	{Name: "count"},
}

type dotfileActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var dotfileOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
	{Name: "name"},
	{Name: "path"},
	{Name: "extension"},
	{Name: "mimeType"},
	{Name: "language"},
}

type iDotfileRelationWith interface {
	getQuery() builder.Query
	with()
	dotfileRelation()
}

type DotfileWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
}

type dotfileDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileDefaultParam) field() builder.Field {
	return p.data
}

func (p dotfileDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileDefaultParam) dotfileModel() {}

type iDotfileOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
}

type dotfileOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileOrderByParam) field() builder.Field {
	return p.data
}

func (p dotfileOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileOrderByParam) dotfileModel() {}

type iDotfileCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	isCursor()
}

type dotfileCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileCursorParam) field() builder.Field {
	return p.data
}

func (p dotfileCursorParam) isCursor() {}

func (p dotfileCursorParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileCursorParam) dotfileModel() {}

type DotfileParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	dotfileModel()
}

type dotfileParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileParamUnique) dotfileModel() {}

func (dotfileParamUnique) unique() {}

func (p dotfileParamUnique) field() builder.Field {
	return p.data
}

func (p dotfileParamUnique) getQuery() builder.Query {
	return p.query
}

type DotfileEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	dotfileModel()
}

type dotfileEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileEqualsParam) dotfileModel() {}

func (dotfileEqualsParam) equals() {}

func (p dotfileEqualsParam) field() builder.Field {
	return p.data
}

func (p dotfileEqualsParam) getQuery() builder.Query {
	return p.query
}

type DotfileEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	dotfileModel()
}

type dotfileEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileEqualsUniqueParam) dotfileModel() {}

func (dotfileEqualsUniqueParam) unique() {}
func (dotfileEqualsUniqueParam) equals() {}

func (p dotfileEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p dotfileEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type DotfileSetParam interface {
	field() builder.Field
	settable()
	dotfileModel()
}

type dotfileSetParam struct {
	data builder.Field
}

func (dotfileSetParam) settable() {}

func (p dotfileSetParam) field() builder.Field {
	return p.data
}

func (p dotfileSetParam) dotfileModel() {}

type DotfileWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	dotfileModel()
	idField()
}

type DotfileWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	idField()
}

type dotfileWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaIDSetParam) dotfileModel() {}

func (p dotfileWithPrismaIDSetParam) idField() {}

type DotfileWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	idField()
}

type dotfileWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaIDEqualsParam) dotfileModel() {}

func (p dotfileWithPrismaIDEqualsParam) idField() {}

func (dotfileWithPrismaIDSetParam) settable()  {}
func (dotfileWithPrismaIDEqualsParam) equals() {}

type dotfileWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaIDEqualsUniqueParam) dotfileModel() {}
func (p dotfileWithPrismaIDEqualsUniqueParam) idField()      {}

func (dotfileWithPrismaIDEqualsUniqueParam) unique() {}
func (dotfileWithPrismaIDEqualsUniqueParam) equals() {}

type DotfileWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	dotfileModel()
	createdAtField()
}

type DotfileWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	createdAtField()
}

type dotfileWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaCreatedAtSetParam) dotfileModel() {}

func (p dotfileWithPrismaCreatedAtSetParam) createdAtField() {}

type DotfileWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	createdAtField()
}

type dotfileWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaCreatedAtEqualsParam) dotfileModel() {}

func (p dotfileWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (dotfileWithPrismaCreatedAtSetParam) settable()  {}
func (dotfileWithPrismaCreatedAtEqualsParam) equals() {}

type dotfileWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaCreatedAtEqualsUniqueParam) dotfileModel()   {}
func (p dotfileWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (dotfileWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (dotfileWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type DotfileWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	dotfileModel()
	updatedAtField()
}

type DotfileWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	updatedAtField()
}

type dotfileWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaUpdatedAtSetParam) dotfileModel() {}

func (p dotfileWithPrismaUpdatedAtSetParam) updatedAtField() {}

type DotfileWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	updatedAtField()
}

type dotfileWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaUpdatedAtEqualsParam) dotfileModel() {}

func (p dotfileWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (dotfileWithPrismaUpdatedAtSetParam) settable()  {}
func (dotfileWithPrismaUpdatedAtEqualsParam) equals() {}

type dotfileWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaUpdatedAtEqualsUniqueParam) dotfileModel()   {}
func (p dotfileWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (dotfileWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (dotfileWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type DotfileWithPrismaNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	dotfileModel()
	nameField()
}

type DotfileWithPrismaNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	nameField()
}

type dotfileWithPrismaNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaNameSetParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaNameSetParam) dotfileModel() {}

func (p dotfileWithPrismaNameSetParam) nameField() {}

type DotfileWithPrismaNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	nameField()
}

type dotfileWithPrismaNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaNameEqualsParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaNameEqualsParam) dotfileModel() {}

func (p dotfileWithPrismaNameEqualsParam) nameField() {}

func (dotfileWithPrismaNameSetParam) settable()  {}
func (dotfileWithPrismaNameEqualsParam) equals() {}

type dotfileWithPrismaNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaNameEqualsUniqueParam) dotfileModel() {}
func (p dotfileWithPrismaNameEqualsUniqueParam) nameField()    {}

func (dotfileWithPrismaNameEqualsUniqueParam) unique() {}
func (dotfileWithPrismaNameEqualsUniqueParam) equals() {}

type DotfileWithPrismaPathEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	dotfileModel()
	pathField()
}

type DotfileWithPrismaPathSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	pathField()
}

type dotfileWithPrismaPathSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaPathSetParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaPathSetParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaPathSetParam) dotfileModel() {}

func (p dotfileWithPrismaPathSetParam) pathField() {}

type DotfileWithPrismaPathWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	pathField()
}

type dotfileWithPrismaPathEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaPathEqualsParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaPathEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaPathEqualsParam) dotfileModel() {}

func (p dotfileWithPrismaPathEqualsParam) pathField() {}

func (dotfileWithPrismaPathSetParam) settable()  {}
func (dotfileWithPrismaPathEqualsParam) equals() {}

type dotfileWithPrismaPathEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaPathEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaPathEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaPathEqualsUniqueParam) dotfileModel() {}
func (p dotfileWithPrismaPathEqualsUniqueParam) pathField()    {}

func (dotfileWithPrismaPathEqualsUniqueParam) unique() {}
func (dotfileWithPrismaPathEqualsUniqueParam) equals() {}

type DotfileWithPrismaExtensionEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	dotfileModel()
	extensionField()
}

type DotfileWithPrismaExtensionSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	extensionField()
}

type dotfileWithPrismaExtensionSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaExtensionSetParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaExtensionSetParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaExtensionSetParam) dotfileModel() {}

func (p dotfileWithPrismaExtensionSetParam) extensionField() {}

type DotfileWithPrismaExtensionWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	extensionField()
}

type dotfileWithPrismaExtensionEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaExtensionEqualsParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaExtensionEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaExtensionEqualsParam) dotfileModel() {}

func (p dotfileWithPrismaExtensionEqualsParam) extensionField() {}

func (dotfileWithPrismaExtensionSetParam) settable()  {}
func (dotfileWithPrismaExtensionEqualsParam) equals() {}

type dotfileWithPrismaExtensionEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaExtensionEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaExtensionEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaExtensionEqualsUniqueParam) dotfileModel()   {}
func (p dotfileWithPrismaExtensionEqualsUniqueParam) extensionField() {}

func (dotfileWithPrismaExtensionEqualsUniqueParam) unique() {}
func (dotfileWithPrismaExtensionEqualsUniqueParam) equals() {}

type DotfileWithPrismaMimeTypeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	dotfileModel()
	mimeTypeField()
}

type DotfileWithPrismaMimeTypeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	mimeTypeField()
}

type dotfileWithPrismaMimeTypeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaMimeTypeSetParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaMimeTypeSetParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaMimeTypeSetParam) dotfileModel() {}

func (p dotfileWithPrismaMimeTypeSetParam) mimeTypeField() {}

type DotfileWithPrismaMimeTypeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	mimeTypeField()
}

type dotfileWithPrismaMimeTypeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaMimeTypeEqualsParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaMimeTypeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaMimeTypeEqualsParam) dotfileModel() {}

func (p dotfileWithPrismaMimeTypeEqualsParam) mimeTypeField() {}

func (dotfileWithPrismaMimeTypeSetParam) settable()  {}
func (dotfileWithPrismaMimeTypeEqualsParam) equals() {}

type dotfileWithPrismaMimeTypeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaMimeTypeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaMimeTypeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaMimeTypeEqualsUniqueParam) dotfileModel()  {}
func (p dotfileWithPrismaMimeTypeEqualsUniqueParam) mimeTypeField() {}

func (dotfileWithPrismaMimeTypeEqualsUniqueParam) unique() {}
func (dotfileWithPrismaMimeTypeEqualsUniqueParam) equals() {}

type DotfileWithPrismaLanguageEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	dotfileModel()
	languageField()
}

type DotfileWithPrismaLanguageSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	languageField()
}

type dotfileWithPrismaLanguageSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaLanguageSetParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaLanguageSetParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaLanguageSetParam) dotfileModel() {}

func (p dotfileWithPrismaLanguageSetParam) languageField() {}

type DotfileWithPrismaLanguageWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	dotfileModel()
	languageField()
}

type dotfileWithPrismaLanguageEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaLanguageEqualsParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaLanguageEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaLanguageEqualsParam) dotfileModel() {}

func (p dotfileWithPrismaLanguageEqualsParam) languageField() {}

func (dotfileWithPrismaLanguageSetParam) settable()  {}
func (dotfileWithPrismaLanguageEqualsParam) equals() {}

type dotfileWithPrismaLanguageEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p dotfileWithPrismaLanguageEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p dotfileWithPrismaLanguageEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p dotfileWithPrismaLanguageEqualsUniqueParam) dotfileModel()  {}
func (p dotfileWithPrismaLanguageEqualsUniqueParam) languageField() {}

func (dotfileWithPrismaLanguageEqualsUniqueParam) unique() {}
func (dotfileWithPrismaLanguageEqualsUniqueParam) equals() {}

// --- template create.gotpl ---

// Creates a single dotfile.
func (r dotfileActions) CreateOne(
	_name DotfileWithPrismaNameSetParam,
	_path DotfileWithPrismaPathSetParam,
	_extension DotfileWithPrismaExtensionSetParam,
	_mimeType DotfileWithPrismaMimeTypeSetParam,
	_language DotfileWithPrismaLanguageSetParam,

	optional ...DotfileSetParam,
) dotfileCreateOne {
	var v dotfileCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Dotfile"
	v.query.Outputs = dotfileOutput

	var fields []builder.Field

	fields = append(fields, _name.field())
	fields = append(fields, _path.field())
	fields = append(fields, _extension.field())
	fields = append(fields, _mimeType.field())
	fields = append(fields, _language.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r dotfileCreateOne) With(params ...iDotfileRelationWith) dotfileCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type dotfileCreateOne struct {
	query builder.Query
}

func (p dotfileCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p dotfileCreateOne) dotfileModel() {}

func (r dotfileCreateOne) Exec(ctx context.Context) (*DotfileModel, error) {
	var v DotfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r dotfileCreateOne) Tx() dotfileUniqueTxResult {
	v := NewdotfileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template find.gotpl ---

type dotfileFindUnique struct {
	query builder.Query
}

func (r dotfileFindUnique) getQuery() builder.Query {
	return r.query
}

func (r dotfileFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r dotfileFindUnique) with()            {}
func (r dotfileFindUnique) dotfileModel()    {}
func (r dotfileFindUnique) dotfileRelation() {}

func (r dotfileActions) FindUnique(
	params DotfileEqualsUniqueWhereParam,
) dotfileFindUnique {
	var v dotfileFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Dotfile"
	v.query.Outputs = dotfileOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r dotfileFindUnique) With(params ...iDotfileRelationWith) dotfileFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r dotfileFindUnique) Exec(ctx context.Context) (
	*DotfileModel,
	error,
) {
	var v *DotfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r dotfileFindUnique) ExecInner(ctx context.Context) (
	*InnerDotfile,
	error,
) {
	var v *InnerDotfile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r dotfileFindUnique) Update(params ...DotfileSetParam) dotfileUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Dotfile"

	var v dotfileUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type dotfileUpdateUnique struct {
	query builder.Query
}

func (r dotfileUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r dotfileUpdateUnique) dotfileModel() {}

func (r dotfileUpdateUnique) Exec(ctx context.Context) (*DotfileModel, error) {
	var v DotfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r dotfileUpdateUnique) Tx() dotfileUniqueTxResult {
	v := NewdotfileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r dotfileFindUnique) Delete() dotfileDeleteUnique {
	var v dotfileDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Dotfile"

	return v
}

type dotfileDeleteUnique struct {
	query builder.Query
}

func (r dotfileDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p dotfileDeleteUnique) dotfileModel() {}

func (r dotfileDeleteUnique) Exec(ctx context.Context) (*DotfileModel, error) {
	var v DotfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r dotfileDeleteUnique) Tx() dotfileUniqueTxResult {
	v := NewdotfileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type dotfileFindFirst struct {
	query builder.Query
}

func (r dotfileFindFirst) getQuery() builder.Query {
	return r.query
}

func (r dotfileFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r dotfileFindFirst) with()            {}
func (r dotfileFindFirst) dotfileModel()    {}
func (r dotfileFindFirst) dotfileRelation() {}

func (r dotfileActions) FindFirst(
	params ...DotfileWhereParam,
) dotfileFindFirst {
	var v dotfileFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Dotfile"
	v.query.Outputs = dotfileOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name: "where",
			Fields: []builder.Field{builder.Field{
				Name:     "AND",
				List:     true,
				WrapList: true,
				Fields:   where,
			}},
		})
	}

	return v
}

func (r dotfileFindFirst) With(params ...iDotfileRelationWith) dotfileFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r dotfileFindFirst) OrderBy(params ...iDotfileOrderByParam) dotfileFindFirst {
	var fields []builder.Field

	for _, param := range params {
		direction, _ := param.field().Value.(types.Direction)

		fields = append(fields, builder.Field{
			Name:  param.field().Name,
			Value: direction,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "orderBy",
		Fields: fields,
	})

	return r
}

func (r dotfileFindFirst) Skip(count int) dotfileFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r dotfileFindFirst) Take(count int) dotfileFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r dotfileFindFirst) Cursor(cursor iDotfileCursorParam) dotfileFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r dotfileFindFirst) Exec(ctx context.Context) (
	*DotfileModel,
	error,
) {
	var v *DotfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r dotfileFindFirst) ExecInner(ctx context.Context) (
	*InnerDotfile,
	error,
) {
	var v *InnerDotfile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type dotfileFindMany struct {
	query builder.Query
}

func (r dotfileFindMany) getQuery() builder.Query {
	return r.query
}

func (r dotfileFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r dotfileFindMany) with()            {}
func (r dotfileFindMany) dotfileModel()    {}
func (r dotfileFindMany) dotfileRelation() {}

func (r dotfileActions) FindMany(
	params ...DotfileWhereParam,
) dotfileFindMany {
	var v dotfileFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Dotfile"
	v.query.Outputs = dotfileOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name: "where",
			Fields: []builder.Field{builder.Field{
				Name:     "AND",
				List:     true,
				WrapList: true,
				Fields:   where,
			}},
		})
	}

	return v
}

func (r dotfileFindMany) With(params ...iDotfileRelationWith) dotfileFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r dotfileFindMany) OrderBy(params ...iDotfileOrderByParam) dotfileFindMany {
	var fields []builder.Field

	for _, param := range params {
		direction, _ := param.field().Value.(types.Direction)

		fields = append(fields, builder.Field{
			Name:  param.field().Name,
			Value: direction,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "orderBy",
		Fields: fields,
	})

	return r
}

func (r dotfileFindMany) Skip(count int) dotfileFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r dotfileFindMany) Take(count int) dotfileFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r dotfileFindMany) Cursor(cursor iDotfileCursorParam) dotfileFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r dotfileFindMany) Exec(ctx context.Context) (
	[]DotfileModel,
	error,
) {
	var v []DotfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r dotfileFindMany) ExecInner(ctx context.Context) (
	[]InnerDotfile,
	error,
) {
	var v []InnerDotfile
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r dotfileFindMany) Update(params ...DotfileSetParam) dotfileUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Dotfile"

	r.query.Outputs = countOutput

	var v dotfileUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type dotfileUpdateMany struct {
	query builder.Query
}

func (r dotfileUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r dotfileUpdateMany) dotfileModel() {}

func (r dotfileUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r dotfileUpdateMany) Tx() dotfileManyTxResult {
	v := NewdotfileManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r dotfileFindMany) Delete() dotfileDeleteMany {
	var v dotfileDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Dotfile"

	v.query.Outputs = countOutput

	return v
}

type dotfileDeleteMany struct {
	query builder.Query
}

func (r dotfileDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p dotfileDeleteMany) dotfileModel() {}

func (r dotfileDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r dotfileDeleteMany) Tx() dotfileManyTxResult {
	v := NewdotfileManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template transaction.gotpl ---

func NewdotfileUniqueTxResult() dotfileUniqueTxResult {
	return dotfileUniqueTxResult{
		result: &transaction.Result{},
	}
}

type dotfileUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p dotfileUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p dotfileUniqueTxResult) IsTx() {}

func (r dotfileUniqueTxResult) Result() (v *DotfileModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func NewdotfileManyTxResult() dotfileManyTxResult {
	return dotfileManyTxResult{
		result: &transaction.Result{},
	}
}

type dotfileManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p dotfileManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p dotfileManyTxResult) IsTx() {}

func (r dotfileManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

// --- template upsert.gotpl ---

type dotfileUpsertOne struct {
	query builder.Query
}

func (r dotfileUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r dotfileUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r dotfileUpsertOne) with()            {}
func (r dotfileUpsertOne) dotfileModel()    {}
func (r dotfileUpsertOne) dotfileRelation() {}

func (r dotfileActions) UpsertOne(
	params DotfileEqualsUniqueWhereParam,
) dotfileUpsertOne {
	var v dotfileUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Dotfile"
	v.query.Outputs = dotfileOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r dotfileUpsertOne) Create(

	_name DotfileWithPrismaNameSetParam,
	_path DotfileWithPrismaPathSetParam,
	_extension DotfileWithPrismaExtensionSetParam,
	_mimeType DotfileWithPrismaMimeTypeSetParam,
	_language DotfileWithPrismaLanguageSetParam,

	optional ...DotfileSetParam,
) dotfileUpsertOne {
	var v dotfileUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _name.field())
	fields = append(fields, _path.field())
	fields = append(fields, _extension.field())
	fields = append(fields, _mimeType.field())
	fields = append(fields, _language.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r dotfileUpsertOne) Update(
	params ...DotfileSetParam,
) dotfileUpsertOne {
	var v dotfileUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r dotfileUpsertOne) Exec(ctx context.Context) (*DotfileModel, error) {
	var v DotfileModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r dotfileUpsertOne) Tx() dotfileUniqueTxResult {
	v := NewdotfileUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template client.gotpl ---
const schema = `generator client {
  provider = "prisma-client-go"
}

datasource db {
  provider = "sqlite"
  url      = "file:storage.db"
}

model Dotfile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  path      String   @unique
  extension String
  mimeType  String
  language  String
}
`

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = false

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//   client := db.NewClient()
//   if err := client.Prisma.Connect(); err != nil {
//     handle(err)
//   }
//
//   defer func() {
//     if err := client.Prisma.Disconnect(); err != nil {
//       panic(fmt.Errorf("could not disconnect: %w", err))
//     }
//   }()
func NewClient() *PrismaClient {
	c := newClient()
	c.Engine = engine.New(schema, hasBinaryTargets)
	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

func newMockClient(expectations *[]mock.Expectation) *PrismaClient {
	c := newClient()
	c.Engine = mock.New(expectations)
	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

func newClient() *PrismaClient {
	c := &PrismaClient{}
	c.Dotfile = dotfileActions{client: c}

	c.Prisma = &PrismaActions{
		Raw: &raw.Raw{Engine: c},
		TX:  &transaction.TX{Engine: c},
	}
	return c
}

type PrismaActions struct {
	*lifecycle.Lifecycle
	*raw.Raw
	*transaction.TX
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine is an abstractions of what happens under the hood
	// the query engine can spawn and manage the binary and send requests to it,
	// while a mock engine would collect mocks to verify them later
	engine.Engine

	// prisma provides prisma-related methods as opposed to model methods, such as Connect, Disconnect or raw queries
	Prisma *PrismaActions

	// Dotfile provides access to CRUD methods.
	Dotfile dotfileActions
}

// deprecated: use .Prisma.Connect
func (c *PrismaClient) Connect() error {
	return c.Prisma.Connect()
}

// deprecated: use .Prisma.Disconnect
func (c *PrismaClient) Disconnect() error {
	return c.Prisma.Disconnect()
}

// deprecated: use .Prisma.QueryRaw
func (c *PrismaClient) QueryRaw(query string, params ...interface{}) raw.QueryExec {
	return c.Prisma.QueryRaw(query, params...)
}

// deprecated: use .Prisma.ExecuteRaw
func (c *PrismaClient) ExecuteRaw(query string, params ...interface{}) raw.ExecuteExec {
	return c.Prisma.ExecuteRaw(query, params...)
}

// --- template enums.gotpl ---

// --- template errors.gotpl ---
var ErrNotFound = types.ErrNotFound

// --- template mock.gotpl ---
func NewMock() (*PrismaClient, *Mock, func(t *testing.T)) {
	expectations := new([]mock.Expectation)
	pc := newMockClient(expectations)
	m := &Mock{
		Mock: &mock.Mock{
			Expectations: expectations,
		},
	}

	m.Dotfile = dotfileMock{
		mock: m,
	}

	return pc, m, m.Ensure
}

type Mock struct {
	*mock.Mock

	Dotfile dotfileMock
}

type dotfileMock struct {
	mock *Mock
}

type iDotfileMockExpectParam interface {
	ExtractQuery() builder.Query
	dotfileModel()
}

func (m *dotfileMock) Expect(query iDotfileMockExpectParam) *dotfileMockExec {
	return &dotfileMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type dotfileMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *dotfileMockExec) Returns(v DotfileModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *dotfileMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

// --- template models.gotpl ---

// DotfileModel represents the `json:"Dotfile"` model and is a wrapper for accessing fields and methods
type DotfileModel struct {
	InnerDotfile
	RelationsDotfile
}

// InnerDotfile holds the actual data
type InnerDotfile struct {
	ID        string   `json:"id"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
	Name      string   `json:"name"`
	Path      string   `json:"path"`
	Extension string   `json:"extension"`
	MimeType  string   `json:"mimeType"`
	Language  string   `json:"language"`
}

// RelationsDotfile holds the relation data separately
type RelationsDotfile struct {
}

// --- template query.gotpl ---

// Dotfile acts as a namespaces to access query methods for the Dotfile model
var Dotfile = dotfileQuery{}

// dotfileQuery exposes query functions for the dotfile model
type dotfileQuery struct {
	// ID
	//
	// @required
	ID dotfileQueryIDString

	// CreatedAt
	//
	// @required
	CreatedAt dotfileQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt dotfileQueryUpdatedAtDateTime

	// Name
	//
	// @required
	Name dotfileQueryNameString

	// Path
	//
	// @required
	// @unique
	Path dotfileQueryPathString

	// Extension
	//
	// @required
	Extension dotfileQueryExtensionString

	// MimeType
	//
	// @required
	MimeType dotfileQueryMimeTypeString

	// Language
	//
	// @required
	Language dotfileQueryLanguageString
}

func (dotfileQuery) Not(params ...DotfileWhereParam) dotfileDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return dotfileDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (dotfileQuery) Or(params ...DotfileWhereParam) dotfileDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return dotfileDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (dotfileQuery) And(params ...DotfileWhereParam) dotfileDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return dotfileDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type dotfileQueryIDString struct{}

// Set the required value of ID
func (r dotfileQueryIDString) Set(value string) dotfileSetParam {

	return dotfileSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r dotfileQueryIDString) SetIfPresent(value *string) dotfileSetParam {
	if value == nil {
		return dotfileSetParam{}
	}

	return r.Set(*value)
}

func (r dotfileQueryIDString) Equals(value string) dotfileWithPrismaIDEqualsUniqueParam {

	return dotfileWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryIDString) EqualsIfPresent(value *string) dotfileWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return dotfileWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r dotfileQueryIDString) In(values []string) dotfileParamUnique {
	var fields []builder.Field
	for _, v := range values {
		fields = append(fields, builder.Field{
			Value: v,
		})
	}
	return dotfileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:   "in",
					List:   true,
					Fields: fields,
				},
			},
		},
	}
}

func (r dotfileQueryIDString) Order(direction types.Direction) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r dotfileQueryIDString) Cursor(cursor string) dotfileCursorParam {
	return dotfileCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r dotfileQueryIDString) Contains(value string) dotfileParamUnique {
	return dotfileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryIDString) ContainsIfPresent(value *string) dotfileParamUnique {
	if value == nil {
		return dotfileParamUnique{}
	}
	return r.Contains(*value)
}

func (r dotfileQueryIDString) HasPrefix(value string) dotfileParamUnique {
	return dotfileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryIDString) HasPrefixIfPresent(value *string) dotfileParamUnique {
	if value == nil {
		return dotfileParamUnique{}
	}
	return r.HasPrefix(*value)
}

func (r dotfileQueryIDString) HasSuffix(value string) dotfileParamUnique {
	return dotfileParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryIDString) HasSuffixIfPresent(value *string) dotfileParamUnique {
	if value == nil {
		return dotfileParamUnique{}
	}
	return r.HasSuffix(*value)
}

// base struct
type dotfileQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r dotfileQueryCreatedAtDateTime) Set(value DateTime) dotfileSetParam {

	return dotfileSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r dotfileQueryCreatedAtDateTime) SetIfPresent(value *DateTime) dotfileSetParam {
	if value == nil {
		return dotfileSetParam{}
	}

	return r.Set(*value)
}

func (r dotfileQueryCreatedAtDateTime) Equals(value DateTime) dotfileWithPrismaCreatedAtEqualsParam {

	return dotfileWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) dotfileWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return dotfileWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r dotfileQueryCreatedAtDateTime) In(values []DateTime) dotfileDefaultParam {
	var fields []builder.Field
	for _, v := range values {
		fields = append(fields, builder.Field{
			Value: v,
		})
	}
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:   "in",
					List:   true,
					Fields: fields,
				},
			},
		},
	}
}

func (r dotfileQueryCreatedAtDateTime) Order(direction types.Direction) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r dotfileQueryCreatedAtDateTime) Before(value DateTime) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.Before(*value)
}

func (r dotfileQueryCreatedAtDateTime) After(value DateTime) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.After(*value)
}

func (r dotfileQueryCreatedAtDateTime) BeforeEquals(value DateTime) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

func (r dotfileQueryCreatedAtDateTime) AfterEquals(value DateTime) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.AfterEquals(*value)
}

// base struct
type dotfileQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r dotfileQueryUpdatedAtDateTime) Set(value DateTime) dotfileSetParam {

	return dotfileSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r dotfileQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) dotfileSetParam {
	if value == nil {
		return dotfileSetParam{}
	}

	return r.Set(*value)
}

func (r dotfileQueryUpdatedAtDateTime) Equals(value DateTime) dotfileWithPrismaUpdatedAtEqualsParam {

	return dotfileWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) dotfileWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return dotfileWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r dotfileQueryUpdatedAtDateTime) In(values []DateTime) dotfileDefaultParam {
	var fields []builder.Field
	for _, v := range values {
		fields = append(fields, builder.Field{
			Value: v,
		})
	}
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:   "in",
					List:   true,
					Fields: fields,
				},
			},
		},
	}
}

func (r dotfileQueryUpdatedAtDateTime) Order(direction types.Direction) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r dotfileQueryUpdatedAtDateTime) Before(value DateTime) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.Before(*value)
}

func (r dotfileQueryUpdatedAtDateTime) After(value DateTime) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.After(*value)
}

func (r dotfileQueryUpdatedAtDateTime) BeforeEquals(value DateTime) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

func (r dotfileQueryUpdatedAtDateTime) AfterEquals(value DateTime) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.AfterEquals(*value)
}

// base struct
type dotfileQueryNameString struct{}

// Set the required value of Name
func (r dotfileQueryNameString) Set(value string) dotfileWithPrismaNameSetParam {

	return dotfileWithPrismaNameSetParam{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}

}

// Set the optional value of Name dynamically
func (r dotfileQueryNameString) SetIfPresent(value *string) dotfileWithPrismaNameSetParam {
	if value == nil {
		return dotfileWithPrismaNameSetParam{}
	}

	return r.Set(*value)
}

func (r dotfileQueryNameString) Equals(value string) dotfileWithPrismaNameEqualsParam {

	return dotfileWithPrismaNameEqualsParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryNameString) EqualsIfPresent(value *string) dotfileWithPrismaNameEqualsParam {
	if value == nil {
		return dotfileWithPrismaNameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r dotfileQueryNameString) In(values []string) dotfileDefaultParam {
	var fields []builder.Field
	for _, v := range values {
		fields = append(fields, builder.Field{
			Value: v,
		})
	}
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:   "in",
					List:   true,
					Fields: fields,
				},
			},
		},
	}
}

func (r dotfileQueryNameString) Order(direction types.Direction) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name:  "name",
			Value: direction,
		},
	}
}

func (r dotfileQueryNameString) Contains(value string) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryNameString) ContainsIfPresent(value *string) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.Contains(*value)
}

func (r dotfileQueryNameString) HasPrefix(value string) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryNameString) HasPrefixIfPresent(value *string) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.HasPrefix(*value)
}

func (r dotfileQueryNameString) HasSuffix(value string) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryNameString) HasSuffixIfPresent(value *string) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.HasSuffix(*value)
}

// base struct
type dotfileQueryPathString struct{}

// Set the required value of Path
func (r dotfileQueryPathString) Set(value string) dotfileWithPrismaPathSetParam {

	return dotfileWithPrismaPathSetParam{
		data: builder.Field{
			Name:  "path",
			Value: value,
		},
	}

}

// Set the optional value of Path dynamically
func (r dotfileQueryPathString) SetIfPresent(value *string) dotfileWithPrismaPathSetParam {
	if value == nil {
		return dotfileWithPrismaPathSetParam{}
	}

	return r.Set(*value)
}

func (r dotfileQueryPathString) Equals(value string) dotfileWithPrismaPathEqualsUniqueParam {

	return dotfileWithPrismaPathEqualsUniqueParam{
		data: builder.Field{
			Name: "path",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryPathString) EqualsIfPresent(value *string) dotfileWithPrismaPathEqualsUniqueParam {
	if value == nil {
		return dotfileWithPrismaPathEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r dotfileQueryPathString) In(values []string) dotfileParamUnique {
	var fields []builder.Field
	for _, v := range values {
		fields = append(fields, builder.Field{
			Value: v,
		})
	}
	return dotfileParamUnique{
		data: builder.Field{
			Name: "path",
			Fields: []builder.Field{
				{
					Name:   "in",
					List:   true,
					Fields: fields,
				},
			},
		},
	}
}

func (r dotfileQueryPathString) Order(direction types.Direction) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name:  "path",
			Value: direction,
		},
	}
}

func (r dotfileQueryPathString) Cursor(cursor string) dotfileCursorParam {
	return dotfileCursorParam{
		data: builder.Field{
			Name:  "path",
			Value: cursor,
		},
	}
}

func (r dotfileQueryPathString) Contains(value string) dotfileParamUnique {
	return dotfileParamUnique{
		data: builder.Field{
			Name: "path",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryPathString) ContainsIfPresent(value *string) dotfileParamUnique {
	if value == nil {
		return dotfileParamUnique{}
	}
	return r.Contains(*value)
}

func (r dotfileQueryPathString) HasPrefix(value string) dotfileParamUnique {
	return dotfileParamUnique{
		data: builder.Field{
			Name: "path",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryPathString) HasPrefixIfPresent(value *string) dotfileParamUnique {
	if value == nil {
		return dotfileParamUnique{}
	}
	return r.HasPrefix(*value)
}

func (r dotfileQueryPathString) HasSuffix(value string) dotfileParamUnique {
	return dotfileParamUnique{
		data: builder.Field{
			Name: "path",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryPathString) HasSuffixIfPresent(value *string) dotfileParamUnique {
	if value == nil {
		return dotfileParamUnique{}
	}
	return r.HasSuffix(*value)
}

// base struct
type dotfileQueryExtensionString struct{}

// Set the required value of Extension
func (r dotfileQueryExtensionString) Set(value string) dotfileWithPrismaExtensionSetParam {

	return dotfileWithPrismaExtensionSetParam{
		data: builder.Field{
			Name:  "extension",
			Value: value,
		},
	}

}

// Set the optional value of Extension dynamically
func (r dotfileQueryExtensionString) SetIfPresent(value *string) dotfileWithPrismaExtensionSetParam {
	if value == nil {
		return dotfileWithPrismaExtensionSetParam{}
	}

	return r.Set(*value)
}

func (r dotfileQueryExtensionString) Equals(value string) dotfileWithPrismaExtensionEqualsParam {

	return dotfileWithPrismaExtensionEqualsParam{
		data: builder.Field{
			Name: "extension",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryExtensionString) EqualsIfPresent(value *string) dotfileWithPrismaExtensionEqualsParam {
	if value == nil {
		return dotfileWithPrismaExtensionEqualsParam{}
	}
	return r.Equals(*value)
}

func (r dotfileQueryExtensionString) In(values []string) dotfileDefaultParam {
	var fields []builder.Field
	for _, v := range values {
		fields = append(fields, builder.Field{
			Value: v,
		})
	}
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "extension",
			Fields: []builder.Field{
				{
					Name:   "in",
					List:   true,
					Fields: fields,
				},
			},
		},
	}
}

func (r dotfileQueryExtensionString) Order(direction types.Direction) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name:  "extension",
			Value: direction,
		},
	}
}

func (r dotfileQueryExtensionString) Contains(value string) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "extension",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryExtensionString) ContainsIfPresent(value *string) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.Contains(*value)
}

func (r dotfileQueryExtensionString) HasPrefix(value string) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "extension",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryExtensionString) HasPrefixIfPresent(value *string) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.HasPrefix(*value)
}

func (r dotfileQueryExtensionString) HasSuffix(value string) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "extension",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryExtensionString) HasSuffixIfPresent(value *string) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.HasSuffix(*value)
}

// base struct
type dotfileQueryMimeTypeString struct{}

// Set the required value of MimeType
func (r dotfileQueryMimeTypeString) Set(value string) dotfileWithPrismaMimeTypeSetParam {

	return dotfileWithPrismaMimeTypeSetParam{
		data: builder.Field{
			Name:  "mimeType",
			Value: value,
		},
	}

}

// Set the optional value of MimeType dynamically
func (r dotfileQueryMimeTypeString) SetIfPresent(value *string) dotfileWithPrismaMimeTypeSetParam {
	if value == nil {
		return dotfileWithPrismaMimeTypeSetParam{}
	}

	return r.Set(*value)
}

func (r dotfileQueryMimeTypeString) Equals(value string) dotfileWithPrismaMimeTypeEqualsParam {

	return dotfileWithPrismaMimeTypeEqualsParam{
		data: builder.Field{
			Name: "mimeType",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryMimeTypeString) EqualsIfPresent(value *string) dotfileWithPrismaMimeTypeEqualsParam {
	if value == nil {
		return dotfileWithPrismaMimeTypeEqualsParam{}
	}
	return r.Equals(*value)
}

func (r dotfileQueryMimeTypeString) In(values []string) dotfileDefaultParam {
	var fields []builder.Field
	for _, v := range values {
		fields = append(fields, builder.Field{
			Value: v,
		})
	}
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "mimeType",
			Fields: []builder.Field{
				{
					Name:   "in",
					List:   true,
					Fields: fields,
				},
			},
		},
	}
}

func (r dotfileQueryMimeTypeString) Order(direction types.Direction) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name:  "mimeType",
			Value: direction,
		},
	}
}

func (r dotfileQueryMimeTypeString) Contains(value string) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "mimeType",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryMimeTypeString) ContainsIfPresent(value *string) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.Contains(*value)
}

func (r dotfileQueryMimeTypeString) HasPrefix(value string) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "mimeType",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryMimeTypeString) HasPrefixIfPresent(value *string) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.HasPrefix(*value)
}

func (r dotfileQueryMimeTypeString) HasSuffix(value string) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "mimeType",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryMimeTypeString) HasSuffixIfPresent(value *string) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.HasSuffix(*value)
}

// base struct
type dotfileQueryLanguageString struct{}

// Set the required value of Language
func (r dotfileQueryLanguageString) Set(value string) dotfileWithPrismaLanguageSetParam {

	return dotfileWithPrismaLanguageSetParam{
		data: builder.Field{
			Name:  "language",
			Value: value,
		},
	}

}

// Set the optional value of Language dynamically
func (r dotfileQueryLanguageString) SetIfPresent(value *string) dotfileWithPrismaLanguageSetParam {
	if value == nil {
		return dotfileWithPrismaLanguageSetParam{}
	}

	return r.Set(*value)
}

func (r dotfileQueryLanguageString) Equals(value string) dotfileWithPrismaLanguageEqualsParam {

	return dotfileWithPrismaLanguageEqualsParam{
		data: builder.Field{
			Name: "language",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryLanguageString) EqualsIfPresent(value *string) dotfileWithPrismaLanguageEqualsParam {
	if value == nil {
		return dotfileWithPrismaLanguageEqualsParam{}
	}
	return r.Equals(*value)
}

func (r dotfileQueryLanguageString) In(values []string) dotfileDefaultParam {
	var fields []builder.Field
	for _, v := range values {
		fields = append(fields, builder.Field{
			Value: v,
		})
	}
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "language",
			Fields: []builder.Field{
				{
					Name:   "in",
					List:   true,
					Fields: fields,
				},
			},
		},
	}
}

func (r dotfileQueryLanguageString) Order(direction types.Direction) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name:  "language",
			Value: direction,
		},
	}
}

func (r dotfileQueryLanguageString) Contains(value string) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "language",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryLanguageString) ContainsIfPresent(value *string) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.Contains(*value)
}

func (r dotfileQueryLanguageString) HasPrefix(value string) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "language",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryLanguageString) HasPrefixIfPresent(value *string) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.HasPrefix(*value)
}

func (r dotfileQueryLanguageString) HasSuffix(value string) dotfileDefaultParam {
	return dotfileDefaultParam{
		data: builder.Field{
			Name: "language",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

func (r dotfileQueryLanguageString) HasSuffixIfPresent(value *string) dotfileDefaultParam {
	if value == nil {
		return dotfileDefaultParam{}
	}
	return r.HasSuffix(*value)
}
